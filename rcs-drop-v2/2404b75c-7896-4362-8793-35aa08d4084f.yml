### YamlMime:NormalSelectQuestion
responseAlternatives:
  - id: A
    text: ' The application was built natively for the cloud.'
    description: 'While cloud-native workloads are preferred, migrated or modernized applications are reality and they might not utilize the available cloud functionality like auto-scaling, platform notifications and other features the underlying cloud platform can offer. Understanding if the application is cloud-native or not provides a very useful high level indication about potential technical debt for operability and cost efficiency.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: B
    text: The workload is designed to use Availability Zones within a region.
    description: 'Availability Zones can be used to optimise application availability within a region by providing data-center level fault tolerance. However, the application architecture must not share dependencies between zones to use them effectively. It is also important to note that Availability Zones may introduce performance and cost considerations for applications which are extremely ''chatty'' across zones given the implied physical separation between each zone and inter-zone bandwidth charges. That also means that AZ can be considered to get higher SLA for lower cost. Be aware of pricing changes coming to Availability Zone bandwidth starting February 2021.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: C
    text: The application has been designed to scale both in and out.
    description: 'Azure provides elastic scalability, however, applications must leverage a scale-unit approach to navigate service and subscription limits to ensure that individual components and the application as a whole can scale horizontally. Don''t forget about scale in as well, as this is important to drive cost down. For example, scale in and out for App Service is done via rules. Often customers write scale out rule and never write scale in rule, this leaves the App Service more expensive.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: D
    text: Performance requirements are well-defined.
    description: 'Non-functional performance requirements, such as those relating to end-user experiences (e.g. average and maximum response times) are vital to assessing the overall health of an application.  From the cost perspective, it''s recommended to set a budget for extreme circumstances and indicate upper limit for cost (when it''s not worth serving more traffic due to overall costs).'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: E
    text: Critical system flows through the application have been defined for all key business scenarios.
    description: 'Understanding critical system flows is vital to assessing overall operational effectiveness, and should be used to inform a health model for the application. It can also tell if areas of the application are over or under utilized and should be adjusted to better meet business needs and cost goals.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: F
    text: Application Performance Management (APM) tools and log aggregation technologies are used to collect logs and metrics from Azure resources.
    description: 'In order to successfully maintain the application it''s important to ''turn the lights on'' and have clear visibility of important metrics both in real-time and historically. Log aggregation technologies, such as Azure Log Analytics or Splunk, should be used to collate logs and metrics across all application components for subsequent evaluation. Resources may include Azure IaaS and PaaS services as well as 3rd-party applications such as firewalls or anti-malware solutions used in the application. For instance, if Azure Event Hub is used, the Diagnostic Settings should be configured to push logs and metrics to the data sink. Understanding usage helps with right-sizing of the workload, but additional cost for logging needs to be accepted and included in the cost model.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: G
    text: Role Based Access Control (RBAC) is used to control access to operational and financial dashboards and underlying data.
    description: 'Are the dashboards openly available in your organization or do you limit access based on roles etc.? For example: developers usually don''t need to know the overall cost of Azure for the company, but it might be good for them to be able to watch a particular workload. Access to operational and financial data should be tightly controlled to align with segregation of duties, while making sure that it doesn''t hinder operational effectiveness; i.e. scenarios where developers have to raise an ticket to access logs should be avoided.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 7
  - id: H
    text: Specific owners and processes are defined for each alert type.
    description: 'Having well-defined owners and response playbooks per alert is vital to optimizing operational effectiveness. Alerts don''t have to be only technical, for example the budget owner should be made aware of capacity issues so that budgets can be adjusted and discussed.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 8
  - id: J
    text: There is an automated process to deploy application releases to production.
    description: The time it takes to perform a complete environment deployment should align with recovery targets. Automation and agility also lead to cost savings due to the reduction of manual actions and errors.
    imageUrl: ''
    isCorrect: false
    score:
      value: 9
  - id: K
    text: There is awareness around how the application has been built and is being maintained (in house or via an external partner).
    description: Exploring where technical delivery capabilities reside helps to qualify operational model boundaries and estimate the cost of operating the application as well as defining a budget and cost model.
    imageUrl: ''
    isCorrect: false
    score:
      value: 9
  - id: M
    text: The application has a well-defined naming standard for Azure resources.
    description: A well-defined naming convention is important for overall operations to be able to easily determine the usage of certain resources and help understand owners and cost centers responsible for the workload. Naming conventions allow the matching of resource costs to particular workloads.
    imageUrl: ''
    isCorrect: false
    score:
      value: 9
  - id: 'N'
    text: Targets for the time it takes to perform scale operations are defined and monitored.
    description: 'Scale operations (horizontal - changing the number of identical instances, vertical - switching to more/less powerful instances) can be fast, but usually take time to complete. It''s important to understand how this delay affects the application under load and if degraded performance is acceptable.'
    imageUrl: ''
    isCorrect: false
    score:
      value: 0
  - id: O
    text: All internal and external dependencies identified and categorized as either weak or strong.
    description: Categorize dependencies as either weak or strong. Dependencies may be categorized as either strong or weak based on whether or not the application is able to continue operating in a degraded fashion in their absence.
    imageUrl: ''
    isCorrect: false
    score:
      value: 0
  - id: P
    text: None of the above.
    description: ''
    imageUrl: ''
    isCorrect: false
    score:
      value: 0
type: AssessmentQuestion
kind: MultiSelect
condition:
  allOf:
    - 5c915986-fbdf-4f6f-b28c-c36e5af606f3.pillars.operational
  anyOf:
    - 8290e609-cb46-4b31-ac7c-1c7f59272735.workload.core
    - waf-config-data.workload.core
    - waf-config-golive.waf-scenario.core
stem: ''
isRequired: false
legacyId: cost-tradeoffs
uid: 2404b75c-7896-4362-8793-35aa08d4084f
name: What operational excellence allowances for cost have you made?